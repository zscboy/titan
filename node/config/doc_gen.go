// Code generated by github.com/github.com/Filecoin-Titan/titan/node/config/cfgdocgen. DO NOT EDIT.

package config

type DocField struct {
	Name    string
	Type    string
	Comment string
}

var Doc = map[string][]DocField{
	"Bandwidth": []DocField{
		{
			Name: "BandwidthMB",
			Type: "int64",

			Comment: `unit is MiB/s, 0 means no limit`,
		},
		{
			Name: "BandwidthUp",
			Type: "int64",

			Comment: `upload file bandwidth, unit is MiB/s, 0 means no limit`,
		},
		{
			Name: "BandwidthDown",
			Type: "int64",

			Comment: `download file bandwidth, unit is MiB/s, 0 means no limit`,
		},
	},
	"Basic": []DocField{
		{
			Name: "Token",
			Type: "string",

			Comment: ``,
		},
	},
	"CPU": []DocField{
		{
			Name: "Cores",
			Type: "int",

			Comment: ``,
		},
	},
	"CandidateCfg": []DocField{
		{
			Name: "MetadataPath",
			Type: "string",

			Comment: `metadata path`,
		},
		{
			Name: "AssetsPaths",
			Type: "[]string",

			Comment: `assets path`,
		},
		{
			Name: "WebRedirect",
			Type: "string",

			Comment: ``,
		},
		{
			Name: "ExternalURL",
			Type: "string",

			Comment: ``,
		},
	},
	"EdgeCfg": []DocField{
		{
			Name: "Network",
			Type: "Network",

			Comment: ``,
		},
		{
			Name: "AreaID",
			Type: "string",

			Comment: `area id`,
		},
		{
			Name: "Secret",
			Type: "string",

			Comment: `used auth when connect to scheduler`,
		},
		{
			Name: "InsecureSkipVerify",
			Type: "bool",

			Comment: `InsecureSkipVerify http3 client skip tls verify`,
		},
		{
			Name: "CertificatePath",
			Type: "string",

			Comment: `used for http3 server
be used if InsecureSkipVerify is true`,
		},
		{
			Name: "PrivateKeyPath",
			Type: "string",

			Comment: `used for http3 server
be used if InsecureSkipVerify is true`,
		},
		{
			Name: "CaCertificatePath",
			Type: "string",

			Comment: `self sign certificate, use for client`,
		},
		{
			Name: "TCPSrvAddr",
			Type: "string",

			Comment: ``,
		},
		{
			Name: "IPFSAPIURL",
			Type: "string",

			Comment: ``,
		},
		{
			Name: "ValidateDuration",
			Type: "int",

			Comment: `seconds`,
		},
		{
			Name: "MaxSizeOfUploadFile",
			Type: "int",

			Comment: ``,
		},
		{
			Name: "Puller",
			Type: "Puller",

			Comment: ``,
		},
		{
			Name: "Bandwidth",
			Type: "Bandwidth",

			Comment: ``,
		},
		{
			Name: "Netflow",
			Type: "Netflow",

			Comment: ``,
		},
		{
			Name: "Storage",
			Type: "Storage",

			Comment: ``,
		},
		{
			Name: "Memory",
			Type: "Memory",

			Comment: ``,
		},
		{
			Name: "CPU",
			Type: "CPU",

			Comment: ``,
		},
		{
			Name: "Basic",
			Type: "Basic",

			Comment: ``,
		},
	},
	"LocatorCfg": []DocField{
		{
			Name: "ListenAddress",
			Type: "string",

			Comment: `host address and port the edge node api will listen on`,
		},
		{
			Name: "Timeout",
			Type: "string",

			Comment: `used when 'ListenAddress' is unspecified. must be a valid duration recognized by golang's time.ParseDuration function`,
		},
		{
			Name: "GeoDBPath",
			Type: "string",

			Comment: `geodb path`,
		},
		{
			Name: "InsecureSkipVerify",
			Type: "bool",

			Comment: `InsecureSkipVerify http3 client skip tls verify`,
		},
		{
			Name: "CertificatePath",
			Type: "string",

			Comment: `used for http3 server
be used if InsecureSkipVerify is false`,
		},
		{
			Name: "PrivateKeyPath",
			Type: "string",

			Comment: `used for http3 server
be used if InsecureSkipVerify is false`,
		},
		{
			Name: "CaCertificatePath",
			Type: "string",

			Comment: `self sign certificate, use for client`,
		},
		{
			Name: "EtcdAddresses",
			Type: "[]string",

			Comment: `etcd server addresses`,
		},
		{
			Name: "DefaultAreaID",
			Type: "string",

			Comment: ``,
		},
		{
			Name: "DNSServerAddress",
			Type: "string",

			Comment: ``,
		},
		{
			Name: "DNSRecords",
			Type: "map[string]string",

			Comment: ``,
		},
		{
			Name: "LoadBalanceExcludeArea",
			Type: "[]string",

			Comment: ``,
		},
	},
	"Memory": []DocField{
		{
			Name: "MemoryGB",
			Type: "int64",

			Comment: ``,
		},
	},
	"MinioConfig": []DocField{
		{
			Name: "Endpoint",
			Type: "string",

			Comment: ``,
		},
		{
			Name: "AccessKeyID",
			Type: "string",

			Comment: ``,
		},
		{
			Name: "SecretAccessKey",
			Type: "string",

			Comment: ``,
		},
	},
	"Netflow": []DocField{
		{
			Name: "NetflowUp",
			Type: "int64",

			Comment: `upload network flow limit, unit is GB, 0 means no limit`,
		},
		{
			Name: "NetflowDown",
			Type: "int64",

			Comment: `download network flow limit, unit is GB, 0 means no limit`,
		},
	},
	"Network": []DocField{
		{
			Name: "ListenAddress",
			Type: "string",

			Comment: `host address and port the edge node api will listen on`,
		},
		{
			Name: "Timeout",
			Type: "string",

			Comment: `used when 'ListenAddress' is unspecified. must be a valid duration recognized by golang's time.ParseDuration function`,
		},
		{
			Name: "LocatorURL",
			Type: "string",

			Comment: `the url of locator`,
		},
	},
	"Puller": []DocField{
		{
			Name: "PullBlockTimeout",
			Type: "int",

			Comment: `PullBlockTimeout get block timeout`,
		},
		{
			Name: "PullBlockRetry",
			Type: "int",

			Comment: `PullBlockRetry retry when get block failed`,
		},
		{
			Name: "PullBlockParallel",
			Type: "int",

			Comment: `PullBlockParallel the number of goroutine to pull block`,
		},
	},
	"SchedulerCfg": []DocField{
		{
			Name: "ExternalURL",
			Type: "string",

			Comment: `host external address and port`,
		},
		{
			Name: "ListenAddress",
			Type: "string",

			Comment: `host address and port the edge node api will listen on`,
		},
		{
			Name: "DatabaseAddress",
			Type: "string",

			Comment: `database address`,
		},
		{
			Name: "AreaID",
			Type: "string",

			Comment: `area id`,
		},
		{
			Name: "InsecureSkipVerify",
			Type: "bool",

			Comment: `InsecureSkipVerify skip tls verify`,
		},
		{
			Name: "CertificatePath",
			Type: "string",

			Comment: `used for http3 server
be used if InsecureSkipVerify is true`,
		},
		{
			Name: "PrivateKeyPath",
			Type: "string",

			Comment: `used for http3 server
be used if InsecureSkipVerify is true`,
		},
		{
			Name: "CaCertificatePath",
			Type: "string",

			Comment: `self sign certificate, use for client`,
		},
		{
			Name: "EnableValidation",
			Type: "bool",

			Comment: `config to enabled node validation, default: true`,
		},
		{
			Name: "EtcdAddresses",
			Type: "[]string",

			Comment: `etcd server addresses`,
		},
		{
			Name: "CandidateReplicas",
			Type: "int",

			Comment: `Number of candidate node replicas (does not contain 'seed')`,
		},
		{
			Name: "ValidatorRatio",
			Type: "float64",

			Comment: `Proportion of validator in candidate nodes (0 ~ 1)`,
		},
		{
			Name: "ValidatorBaseBwDn",
			Type: "int",

			Comment: `The base downstream bandwidth per validator window (unit : MiB)`,
		},
		{
			Name: "ValidationProfit",
			Type: "float64",

			Comment: `Increased profit after node validation passes`,
		},
		{
			Name: "WorkloadProfit",
			Type: "float64",

			Comment: `Increased profit after node workload passes`,
		},
		{
			Name: "ElectionCycle",
			Type: "int",

			Comment: `ElectionCycle cycle (Unit:Hour)`,
		},
		{
			Name: "NodeScoreLevel",
			Type: "map[string][]int",

			Comment: `Node score level scale
The key of map is the rank name, and the value of map is a int array containing two elements,
the first element of which is the minimum value of score,
and the second element is the maximum value of score. (scores out of 100)`,
		},
		{
			Name: "LevelSelectWeight",
			Type: "map[string]int",

			Comment: `Node level weight
The key of the map is the name of the level, and the value of the map is an int,
indicating how many select weight this level can get (the more select weight, the greater the probability of the node being selected)`,
		},
		{
			Name: "UserFreeStorageSize",
			Type: "int64",

			Comment: ``,
		},
		{
			Name: "UserVipStorageSize",
			Type: "int64",

			Comment: ``,
		},
		{
			Name: "LotusRPCAddress",
			Type: "string",

			Comment: ``,
		},
		{
			Name: "LotusToken",
			Type: "string",

			Comment: ``,
		},
		{
			Name: "EdgeDownloadRatio",
			Type: "float64",

			Comment: `The ratio of edge nodes returned to the user for download`,
		},
		{
			Name: "AssetPullTaskLimit",
			Type: "int",

			Comment: `Maximum number of concurrent asset pulls`,
		},
		{
			Name: "NatDetectConcurrency",
			Type: "int",

			Comment: ``,
		},
		{
			Name: "UploadAssetReplicaCount",
			Type: "int",

			Comment: `Default number of backups for user uploaded files`,
		},
		{
			Name: "UploadAssetExpiration",
			Type: "int",

			Comment: `Default expiration time for user uploaded files`,
		},
		{
			Name: "MaxCountOfVisitShareLink",
			Type: "int",

			Comment: `Non vip user`,
		},
		{
			Name: "Weight",
			Type: "int",

			Comment: `if the area has several scheduler, node will connect to the scheduler which weight is bigger`,
		},
		{
			Name: "MaxAPIKey",
			Type: "int",

			Comment: ``,
		},
		{
			Name: "IPWhitelist",
			Type: "[]string",

			Comment: ``,
		},
		{
			Name: "MaxNumberOfRegistrations",
			Type: "int",

			Comment: ``,
		},
		{
			Name: "IPLimit",
			Type: "int",

			Comment: ``,
		},
		{
			Name: "FillAssetEdgeCount",
			Type: "int64",

			Comment: ``,
		},
		{
			Name: "StorageCandidates",
			Type: "[]string",

			Comment: ``,
		},
		{
			Name: "TestCandidates",
			Type: "map[string]int",

			Comment: ``,
		},
		{
			Name: "L2ValidatorCount",
			Type: "int",

			Comment: ``,
		},
		{
			Name: "AndroidSymbol",
			Type: "string",

			Comment: ``,
		},
		{
			Name: "IOSSymbol",
			Type: "string",

			Comment: ``,
		},
	},
	"Storage": []DocField{
		{
			Name: "StorageGB",
			Type: "int64",

			Comment: ``,
		},
		{
			Name: "Path",
			Type: "string",

			Comment: ``,
		},
	},
}
